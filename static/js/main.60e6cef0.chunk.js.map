{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INIT_TIME","App","state","addPlayerEntry","paused","initTime","getTimeFn","pointEntry","showConfirm","timerFunctionsSet","turnCounter","playerEntries","handleChange","e","setState","target","name","value","addPlayer","preventDefault","alert","Object","keys","includes","newPlayer","toggleConfirm","prevState","reverseArray","arr","newArray","i","length","push","linearScoreFactor","timeSpent","saveGame","localStorage","setItem","JSON","stringify","loadGame","playerEntriesStr","getItem","turnCounterStr","parse","Number","clearPoints","currentPlayer","playerIndex","pauseFn","resetFn","isNaN","player","newplayerEntries","original","discounted","Math","round","padn","timerObj","unit","n","_owner","memoizedState","componentDidMount","setFunctions","startFn","this","className","action","onSubmit","type","id","onChange","placeholder","initialTime","timeToUpdate","direction","startImmediately","lastUnit","checkpoints","time","callback","onStart","onPause","onReset","start","pause","reset","getTime","Fragment","Minutes","Seconds","onClick","map","entry","reduce","s","x","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60e6cef0.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nimport Timer from 'react-compound-timer'\n\nconst INIT_TIME = 5*60*1000\n\nexport class App extends Component {\n\n  state = {\n    addPlayerEntry: '',\n    paused: true,\n    initTime: INIT_TIME,\n    getTimeFn: () => INIT_TIME,\n    pointEntry: '',\n    showConfirm: false,\n    timerFunctionsSet: false,\n    turnCounter: 0,\n    playerEntries: {}\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  addPlayer = (e) => {\n    e.preventDefault()\n    const { addPlayerEntry, playerEntries } = this.state\n    if (addPlayerEntry === '') {\n      return alert('Enter a name')\n    }\n    if (Object.keys(playerEntries).includes(addPlayerEntry)) {\n      return alert('Name taken')\n    }\n    const newPlayer = { [addPlayerEntry]: [] }\n    this.setState({\n      playerEntries: {...playerEntries, ...newPlayer },\n      addPlayerEntry: '',\n    })\n  }\n\n  toggleConfirm = () => {\n      this.setState(prevState => ({ showConfirm: !prevState.showConfirm }))\n  }\n\n  // out of place reverse\n  reverseArray = (arr) => {\n    let newArray = []\n    for (let i = arr.length - 1; i >= 0; i--) {\n      newArray.push(arr[i])\n    }\n    return newArray\n  }\n\n  linearScoreFactor = () => {\n    const timeSpent = INIT_TIME - this.state.getTimeFn()\n    return 1 - (1 / INIT_TIME) * timeSpent\n  }\n\n  saveGame = () => {\n    const { playerEntries, turnCounter } = this.state\n    localStorage.setItem('playerEntries', JSON.stringify(playerEntries))\n    localStorage.setItem('turnCounter', turnCounter)\n  }\n\n  loadGame = () => {\n    const playerEntriesStr = localStorage.getItem('playerEntries')\n    const turnCounterStr = localStorage.getItem('turnCounter')    \n    const playerEntries = playerEntriesStr !== null ? JSON.parse(playerEntriesStr) : {}\n    const turnCounter = Number(turnCounterStr) || 0\n    this.setState({\n      playerEntries,\n      turnCounter,\n    })\n  }\n\n  clearPoints = () => {\n    this.setState({\n      playerEntries: {},\n      turnCounter: 0,\n      showConfirm: false,\n    })\n  }\n\n  currentPlayer = () => {\n    const { playerEntries, turnCounter } = this.state\n    const playerIndex = turnCounter % Object.keys(playerEntries).length\n    return Object.keys(playerEntries)[playerIndex]\n  }\n\n  pointEntry = (e) => {\n    e.preventDefault()\n    const { playerEntries, turnCounter, pointEntry, pauseFn, resetFn, getTimeFn } = this.state\n    if (isNaN(pointEntry)) {\n      return alert('Point entry must be a number')\n    }\n    if (Object.keys(playerEntries).length === 0) {\n      return alert('Add a player to play the game')\n    }\n    if (getTimeFn() === INIT_TIME) {\n      return alert('Start the timer')\n    }\n    const player = this.currentPlayer()\n    const newplayerEntries = {...playerEntries}\n    const original = Number(pointEntry)\n    const timeSpent = INIT_TIME - this.state.getTimeFn()\n    const discounted = Math.round(this.linearScoreFactor() * Number(original))\n    newplayerEntries[player] = [...playerEntries[player], {\n      discounted,\n      original,\n      timeSpent,\n    }]\n    this.setState({\n      playerEntries: newplayerEntries,\n      turnCounter: turnCounter + 1,\n      pointEntry: '',\n      paused: true,\n    }, () => {\n      this.saveGame()\n      pauseFn()\n      resetFn()\n    })\n  }\n\n  padn = (timerObj, unit) => {\n    const n = timerObj._owner.memoizedState[unit]\n    return (n < 10) ? ('0' + n) : n\n  }\n\n  componentDidMount = () => {\n    this.loadGame()\n  }\n\n  // TODO do this without hacks\n  setFunctions = (startFn, pauseFn, resetFn, getTimeFn) => {\n    if (!this.state.timerFunctionsSet) {\n      this.setState({\n        startFn,\n        pauseFn,\n        resetFn,\n        getTimeFn,\n        timerFunctionsSet: true,\n      })\n    }\n  }\n\n  render() {\n    const {\n      addPlayerEntry, paused, initTime, pointEntry, playerEntries, showConfirm\n    } = this.state\n    return (\n      <div className='app'>\n\n        <div className='add-player-form-cont'>\n          <form action='' onSubmit={this.addPlayer} className='add-player-form'>\n            <input\n              type=\"text\"\n              id='addPlayerEntry'\n              name='addPlayerEntry'\n              value={addPlayerEntry}\n              onChange={this.handleChange}\n              placeholder='Player'\n            />\n            <input type=\"submit\" value='Add player' />\n          </form>\n        </div>\n\n        <Timer\n            initialTime={initTime}\n            timeToUpdate={200}\n            direction=\"backward\"\n            startImmediately={false}\n            lastUnit='m'\n            checkpoints={[\n                {\n                    time: 0,\n                    callback: () => alert('countdown finished'),\n                },\n            ]}\n            onStart = {() => {\n              this.setState({ paused: false })\n            }}\n            onPause = {() => {\n              this.setState({ paused: true })\n            }}\n            onReset = {() => {\n              this.setState({ paused: true })\n            }}\n        >\n            {({ start, pause, reset, getTime }) => {\n              this.setFunctions(start, pause, reset, getTime)\n              return (\n                <React.Fragment>\n                    <div className='time'>\n                      {this.padn(<Timer.Minutes />, 'm')}:\n                      {this.padn(<Timer.Seconds />, 's')}\n                    </div>\n                    <div className='buttons'>\n                      {paused ? (\n                        <div className='start-btn-cont'>\n                          <button onClick={start}>Start</button>\n                        </div>\n                      ) : (\n                        <div className='pause-btn-cont'>\n                          <button onClick={() => {\n                            pause()\n                          }}>Pause</button>\n                        </div>\n                      )}\n                    <div className='reset-btn-cont'>\n                      <button onClick={() => {\n                          pause()\n                          this.setState({ time: initTime })\n                          reset()\n                        }}>Reset</button>\n                    </div>\n                  </div>\n                </React.Fragment>\n            )}}\n        </Timer>\n\n        <div className='entry-points-form-cont'>\n          <form action='' onSubmit={this.pointEntry} className='entry-points-form'>\n            <input\n              type=\"text\"\n              id='pointEntry'\n              name='pointEntry'\n              value={pointEntry}\n              onChange={this.handleChange}\n              placeholder='Points'\n            />\n            <input type=\"submit\" value='Submit' />\n          </form>\n        </div>\n\n        <div className='turn-cont'>\n          {this.currentPlayer()}'s turn\n        </div>\n\n        <div className='score-cont'>\n          {Object.keys(playerEntries).map(player => (\n            <div className='player-score-cont' key={player}>\n              <div className='player-name'>\n                {player}\n              </div>\n              <div className='player-total-cont'>\n                {playerEntries[player].map(entry => entry.discounted).reduce((s, x) => s+x, 0)}\n              </div>\n              <div className='player-point-cont'>\n                {this.reverseArray(playerEntries[player]).map((entry, i) => (\n                  <div className='point' key={`point-${player}-${i}`}>\n                    {entry.discounted}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className='new-game-cont'>\n          {showConfirm ? (\n          <div className='confirm-buttons'>\n            <button onClick={this.toggleConfirm}>No</button>\n            <button onClick={this.clearPoints}>Yes</button>\n          </div>\n          )\n          :\n          ((<button onClick={this.toggleConfirm}>\n            New Game\n          </button>))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}