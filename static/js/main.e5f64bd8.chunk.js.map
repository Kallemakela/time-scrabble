{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INIT_TIME","App","state","addPlayerEntry","paused","initTime","getTimeFn","pointEntry","showConfirm","timerFunctionsSet","turnCounter","playerPoints","handleChange","e","setState","target","name","value","addPlayer","preventDefault","newPlayer","toggleConfirm","prevState","linearScoreFactor","timeSpent","saveGame","localStorage","setItem","JSON","stringify","loadGame","playerPointsStr","getItem","turnCounterStr","parse","Number","clearPoints","currentPlayer","playerIndex","Object","keys","length","reverseArray","arr","newArray","i","push","pauseFn","resetFn","isNaN","alert","player","newPlayerPoints","newPoint","Math","round","padn","timerObj","unit","n","_owner","memoizedState","componentDidMount","setFunctions","startFn","this","className","action","onSubmit","type","id","onChange","placeholder","initialTime","timeToUpdate","direction","startImmediately","lastUnit","checkpoints","time","callback","onStart","onPause","onReset","start","pause","reset","getTime","Fragment","Minutes","Seconds","onClick","map","reduce","s","x","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5f64bd8.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nimport Timer from 'react-compound-timer'\n\nconst INIT_TIME = 5*60*1000\n\nexport class App extends Component {\n\n  state = {\n    addPlayerEntry: '',\n    paused: true,\n    initTime: INIT_TIME,\n    getTimeFn: () => INIT_TIME,\n    pointEntry: '',\n    showConfirm: false,\n    timerFunctionsSet: false,\n    turnCounter: 0,\n    // TODO add other info than points to the object e.g. time, index\n    playerPoints: {}\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  addPlayer = (e) => {\n    e.preventDefault()\n    const { addPlayerEntry, playerPoints } = this.state\n    const newPlayer = { [addPlayerEntry]: [] }\n    this.setState({\n      playerPoints: {...playerPoints, ...newPlayer },\n      addPlayerEntry: '',\n    })\n  }\n\n  toggleConfirm = () => {\n      this.setState(prevState => ({ showConfirm: !prevState.showConfirm }))\n  }\n\n  linearScoreFactor = () => {\n    const timeSpent = INIT_TIME - this.state.getTimeFn()\n    return 1 - (1 / INIT_TIME) * timeSpent\n  }\n\n  saveGame = () => {\n    const { playerPoints, turnCounter } = this.state\n    localStorage.setItem('playerPoints', JSON.stringify(playerPoints))\n    localStorage.setItem('turnCounter', turnCounter)\n  }\n\n  loadGame = () => {\n    const playerPointsStr = localStorage.getItem('playerPoints')\n    const turnCounterStr = localStorage.getItem('turnCounter')    \n    const playerPoints = playerPointsStr !== null ? JSON.parse(playerPointsStr) : {}\n    const turnCounter = Number(turnCounterStr) || 0\n    this.setState({\n      playerPoints,\n      turnCounter,\n    })\n  }\n\n  clearPoints = () => {\n    this.setState({\n      playerPoints: {},\n      turnCounter: 0,\n      showConfirm: false,\n    })\n  }\n\n  currentPlayer = () => {\n    const { playerPoints, turnCounter } = this.state\n    const playerIndex = turnCounter % Object.keys(playerPoints).length\n    return Object.keys(playerPoints)[playerIndex]\n  }\n\n  reverseArray = (arr) => {\n    var newArray = [];\n    for (var i = arr.length - 1; i >= 0; i--) {\n      newArray.push(arr[i]);\n    }\n    return newArray;\n  }\n\n  pointEntry = (e) => {\n    e.preventDefault()\n    const { playerPoints, turnCounter, pointEntry, pauseFn, resetFn, getTimeFn } = this.state\n    if (isNaN(pointEntry)) {\n      return alert('Point entry must be a number')\n    }\n    if (Object.keys(playerPoints).length === 0) {\n      return alert('Add a player to play the game')\n    }\n    if (getTimeFn() === INIT_TIME) {\n      return alert('Start the timer')\n    }\n    const player = this.currentPlayer()\n    const newPlayerPoints = {...playerPoints}\n    const newPoint = Math.round(this.linearScoreFactor() * Number(pointEntry))\n    newPlayerPoints[player] = [...playerPoints[player], newPoint]\n    this.setState({\n      playerPoints: newPlayerPoints,\n      turnCounter: turnCounter + 1,\n      pointEntry: '',\n      paused: true,\n    }, () => {\n      this.saveGame()\n      pauseFn()\n      resetFn()\n    })\n  }\n\n  padn = (timerObj, unit) => {\n    const n = timerObj._owner.memoizedState[unit]\n    return (n < 10) ? ('0' + n) : n\n  }\n\n  componentDidMount = () => {\n    this.loadGame()\n  }\n\n  // TODO do this without hacks\n  setFunctions = (startFn, pauseFn, resetFn, getTimeFn) => {\n    if (!this.state.timerFunctionsSet) {\n      this.setState({\n        startFn,\n        pauseFn,\n        resetFn,\n        getTimeFn,\n        timerFunctionsSet: true,\n      })\n    }\n  }\n\n  render() {\n    const {\n      addPlayerEntry, paused, initTime, pointEntry, playerPoints, showConfirm\n    } = this.state\n    return (\n      <div className='app'>\n\n        <div className='add-player-form-cont'>\n          <form action='' onSubmit={this.addPlayer} className='add-player-form'>\n            <input\n              type=\"text\"\n              id='addPlayerEntry'\n              name='addPlayerEntry'\n              value={addPlayerEntry}\n              onChange={this.handleChange}\n              placeholder='Player'\n            />\n            <input type=\"submit\" value='Add player' />\n          </form>\n        </div>\n\n        <Timer\n            initialTime={initTime}\n            timeToUpdate={200}\n            direction=\"backward\"\n            startImmediately={false}\n            lastUnit='m'\n            checkpoints={[\n                {\n                    time: 0,\n                    callback: () => alert('countdown finished'),\n                },\n            ]}\n            onStart = {() => {\n              this.setState({ paused: false })\n            }}\n            onPause = {() => {\n              this.setState({ paused: true })\n            }}\n            onReset = {() => {\n              this.setState({ paused: true })\n            }}\n        >\n            {({ start, pause, reset, getTime }) => {\n              this.setFunctions(start, pause, reset, getTime)\n              return (\n                <React.Fragment>\n                    <div className='time'>\n                      {this.padn(<Timer.Minutes />, 'm')}:\n                      {this.padn(<Timer.Seconds />, 's')}\n                    </div>\n                    <div className='buttons'>\n                      {paused ? (\n                        <div className='start-btn-cont'>\n                          <button onClick={start}>Start</button>\n                        </div>\n                      ) : (\n                        <div className='pause-btn-cont'>\n                          <button onClick={() => {\n                            pause()\n                          }}>Pause</button>\n                        </div>\n                      )}\n                    <div className='reset-btn-cont'>\n                      <button onClick={() => {\n                          pause()\n                          this.setState({ time: initTime })\n                          reset()\n                        }}>Reset</button>\n                    </div>\n                  </div>\n                </React.Fragment>\n            )}}\n        </Timer>\n\n        <div className='entry-points-form-cont'>\n          <form action='' onSubmit={this.pointEntry} className='entry-points-form'>\n            <input\n              type=\"text\"\n              id='pointEntry'\n              name='pointEntry'\n              value={pointEntry}\n              onChange={this.handleChange}\n              placeholder='Points'\n            />\n            <input type=\"submit\" value='Submit' />\n          </form>\n        </div>\n\n        <div className='turn-cont'>\n          {this.currentPlayer()}'s turn\n        </div>\n\n        <div className='score-cont'>\n          {Object.keys(playerPoints).map(player => (\n            <div className='player-score-cont' key={player}>\n              <div className='player-name'>\n                {player}\n              </div>\n              <div className='player-total-cont'>\n                {playerPoints[player].reduce((s, x) => s+x, 0)}\n              </div>\n              <div className='player-point-cont'>\n                {this.reverseArray(playerPoints[player]).map((n, i) => (\n                  <div className='point' key={`point-${player}-${i}`}>\n                    {n}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className='new-game-cont'>\n          {showConfirm ? (\n          <div className='confirm-buttons'>\n            <button onClick={this.toggleConfirm}>No</button>\n            <button onClick={this.clearPoints}>Yes</button>\n          </div>\n          )\n          :\n          ((<button onClick={this.toggleConfirm}>\n            New Game\n          </button>))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}